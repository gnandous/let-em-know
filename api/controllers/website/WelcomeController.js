/**
 * WelcomeController.js
 *
 * @description :: Server-side logic for managing anonyme users.
 */

var User = require('../../models/UserModel');
var config = require('../../../config/environnement');

module.exports = {

  // implements index method

  index: function(req, res, next){
    res.render('index', { title: 'Hello world', description: '<< this page is generated by WelcomeController >>' });
  },

  // @description :: render login page

  login: function(req, res, next){
    res.render('login', {title: "login"});
  },

  // =======================================================================//
  // @description :: Implements login logic from website                    //
  // @return ::  User data through json format                              //
  // =======================================================================//

  loginFromWebsite: function(req, res, next){
    var errors = [];
    if (!req.body.pseudo) {
      errors.push({
        field: 'pseudo',
        error: 'pseudo must be filled',
        value: req.body.pseudo
      });
    }
    if (!req.body.password) {
      errors.push({
        field: 'password',
        error: 'password must be a valid email',
        value: req.body.password
      });
    }
    if (errors.length) {
      return(res.render('login', {messages: errors, fields: req.body}));
    }
    var condition = {
      pseudo: req.body.pseudo
    }

    User.findOne(condition, function(err, user){
      if (!user){
        errors.push({
          field: 'message',
          error: 'user doesnt exist',
          value: 'user doesnt exist'
        });
        res.render('login', {messages: errors, fields: req.body});
      }
      else{
        user.comparePassword(req.body.password, function(err, isMatch){
          if (!isMatch){res.render('login', {messages: [{error: 'password is not valid'}], fields: req.body});}
          else{
            var cookieValue = {
              email: user.email,
              token: user.token,
              id: user.id
            };
            res.cookie(config.session.cookie.name, cookieValue, {httpOnly: true });
            res.redirect('/home');
          }
        });
      }
    });
  }
}
